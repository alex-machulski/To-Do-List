{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","state/auth-reducer.ts","state/app-reducer.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","SetAppIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodolistsAC","todos","map","changeTodolistEntityStatusAC","todolistsReducer","fetchTodolistsTC","getState","then","res","catch","err","removeTaskAC","tasks","t","addTaskAC","task","todoListId","changeTaskStatusAC","changeTaskTitleAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","key","helperText","label","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","items","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","removeTodolist","changeTodolistTitle","tasksForTodolist","style","textAlign","marginTop","Button","variant","size","marginRight","listStyle","padding","TodolistsList","todolists","useSelector","thunk","removeTaskTC","taskTitle","a","resultCode","item","addTaskTC","changeStatus","currentTask","find","el","startDate","priority","description","deadline","console","warn","updateTaskStatusTC","newTitle","updateTaskTitleTC","addTodolist","todolistTitle","addTodolistTC","auth","Grid","container","spacing","tasksForTodoList","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","AppWithRedux","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de384006.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecf8e78d-3a9e-4aa3-9a80-8449dce34aaf'\r\n    }\r\n})\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType>>('auth/me');\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from '../state/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : \"Some error occurred\"}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n//type ErrorUtilsDispatchType = Dispatch\r\n//<SetAppErrorActionType | SetAppStatusActionType>","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginParamsType} from \"../api/todolists-api\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedInAC} = slice.actions;\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// export const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case SET_IS_LOGGED_IN:\r\n//             return {...state, isLoggedIn: action.value}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n// actions\r\n// export const setIsLoggedInAC = (value: boolean) =>\r\n//     ({type: SET_IS_LOGGED_IN, value} as const)","import {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status;\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error;\r\n        },\r\n        SetAppIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized;\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppStatusAC, setAppErrorAC, SetAppIsInitializedAC} = slice.actions;\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n                //dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(SetAppIsInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n// loading - show progress bar\r\n// idle, succeeded, failed - hide progress bar\r\n\r\n// export const appReducer = (state: AppReducerStateType = initialState, action: ActionsType): AppReducerStateType => {\r\n//     switch (action.type) {\r\n//         case APP_SET_STATUS:\r\n//             return {...state, status: action.status}\r\n//         case APP_SET_ERROR:\r\n//             return {...state, error: action.error}\r\n//         case APP_SET_INITIALIZED:\r\n//             return {...state, isInitialized: action.isInitialized}\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n//export const setAppStatusAC = (status: RequestStatusType) => ({type: APP_SET_STATUS, status} as const)\r\n//export const setAppErrorAC = (error: string | null) => ({type: APP_SET_ERROR, error} as const)\r\n//export const SetAppIsInitializedAC = (isInitialized: boolean) => ({type: APP_SET_INITIALIZED, isInitialized} as const)","import {todolistsAPI, TodolistType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC,} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n            // return state.filter(tl => tl.id !== action.payload.todolistId)\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todos: Array<TodolistType> }>) {\r\n            return action.payload.todos.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.entityStatus;\r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {\r\n    removeTodolistAC, addTodolistAC, changeTodolistTitleAC,\r\n    changeTodolistFilterAC, setTodolistsAC, changeTodolistEntityStatusAC\r\n} = slice.actions;\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}));\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC({todos: res.data}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (todolistTitle: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}));\r\n    todolistsAPI.createTodolist(todolistTitle)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}));\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}));\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC({todolistId: todolistId}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, todolistTitle: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}));\r\n    todolistsAPI.updateTodolist(todolistId, todolistTitle)\r\n        .then((res) => {\r\n            const action = changeTodolistTitleAC({id: todolistId, title: todolistTitle});\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n//     export const _todolistsReducer =(state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n//     switch (action.type) {\r\n//         case SET_TODOLISTS: {\r\n//             return action.todos.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n//         }\r\n//         case REMOVE_TODOLIST: {\r\n//             return state.filter(tl => tl.id !== action.id)\r\n//         }\r\n//         case ADD_TODOLIST: {\r\n//             return [{...action.todolist, filter: \"all\", entityStatus: \"idle\"}, ...state]\r\n//         }\r\n//         case CHANGE_TODOLIST_TITLE: {\r\n//             return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n//         }\r\n//         case CHANGE_TODOLIST_FILTER: {\r\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n//         }\r\n//         case CHANGE_TODOLIST_ENTITY_STATUS: {\r\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n// actions\r\n// export const removeTodolistAC = (todolistId: string) => ({type: REMOVE_TODOLIST, id: todolistId} as const);\r\n//\r\n// export const addTodolistAC = (todolist: TodolistType) => ({type: ADD_TODOLIST, todolist} as const);\r\n//\r\n// export const changeTodolistTitleAC = (id: string, title: string) =>\r\n//     ({type: CHANGE_TODOLIST_TITLE, id, title} as const);\r\n//\r\n// export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n//     ({type: CHANGE_TODOLIST_FILTER, id, filter} as const);\r\n//\r\n// export const setTodolistsAC = (todos: Array<TodolistType>) => ({type: SET_TODOLISTS, todos} as const);\r\n//\r\n// export const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n//     type: CHANGE_TODOLIST_ENTITY_STATUS, id, entityStatus\r\n// } as const)","import {TaskStatuses, TaskType, todolistsAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {TasksStateType} from \"../app/AppWithRedux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"./todolists-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks.splice(index, 1);\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task);\r\n        },\r\n        changeTaskStatusAC(state, action: PayloadAction<{ taskId: string, status: TaskStatuses, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index].status = action.payload.status;\r\n            }\r\n        },\r\n        changeTaskTitleAC(state, action: PayloadAction<{ taskId: string, title: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index].title = action.payload.title;\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistId];\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todos.forEach(tl => {\r\n                state[tl.id] = [];\r\n            })\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer;\r\nexport const {removeTaskAC, addTaskAC, changeTaskStatusAC, changeTaskTitleAC, setTasksAC} = slice.actions;\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}));\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, taskTitle: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        let res = await todolistsAPI.createTask(todolistId, taskTitle)\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            dispatch(addTaskAC({task}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}));\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            const action = removeTaskAC({taskId, todolistId});\r\n            dispatch(action);\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (id: string, status: TaskStatuses, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState();\r\n        const tasks = state.tasks;\r\n        const tasksForCurrentTodolist = tasks[todolistId];\r\n        const currentTask = tasksForCurrentTodolist.find((el) => {\r\n            return el.id === id\r\n        })\r\n        if (!currentTask) {\r\n            console.warn(\"Task is not found\")\r\n            return;\r\n        }\r\n        dispatch(setAppStatusAC({status: \"loading\"}));\r\n        todolistsAPI.updateTask(todolistId, id, {\r\n            status: status,\r\n            title: currentTask.title,\r\n            startDate: currentTask.startDate,\r\n            priority: currentTask.priority,\r\n            description: currentTask.description,\r\n            deadline: currentTask.deadline\r\n        })\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = changeTaskStatusAC({taskId: id, status, todolistId});\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n    }\r\n\r\nexport const updateTaskTitleTC = (id: string, taskTitle: string, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState();\r\n        const tasks = state.tasks;\r\n        const tasksForCurrentTodolist = tasks[todolistId];\r\n        const currentTask: any = tasksForCurrentTodolist.find((el) => {\r\n            return el.id === id\r\n        })\r\n        dispatch(setAppStatusAC({status: \"loading\"}));\r\n        //const model = {...currentTask, status: status}\r\n        todolistsAPI.updateTask(todolistId, id, {\r\n            status: currentTask.status,\r\n            title: taskTitle,\r\n            startDate: currentTask.startDate,\r\n            priority: currentTask.priority,\r\n            description: currentTask.description,\r\n            deadline: currentTask.deadline\r\n        })\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = changeTaskTitleAC({taskId: id, title: taskTitle, todolistId});\r\n                    dispatch(action);\r\n                    dispatch(setAppStatusAC({status: \"succeeded\"}));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n    }\r\n\r\n// export function tasksReducer(state: TasksStateType = initialState, action: ActionsType): TasksStateType {\r\n//     switch (action.type) {\r\n//         case SET_TASKS: {\r\n//             return {...state, [action.todolistId]: action.tasks}\r\n//         }\r\n//         case SET_TODOLISTS: {\r\n//             let stateCopy = {...state};\r\n//             action.todos.forEach(tl => {\r\n//                 stateCopy[tl.id] = []\r\n//             })\r\n//             return stateCopy\r\n//         }\r\n//         case REMOVE_TASK: {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n//             }\r\n//         }\r\n//         case ADD_TASK: {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n//             }\r\n//         }\r\n//         case CHANGE_TASK_STATUS: {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolistId]: state[action.todolistId]\r\n//                     .map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n//             }\r\n//         }\r\n//         case CHANGE_TASK_TITLE: {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolistId]: state[action.todolistId]\r\n//                     .map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n//             }\r\n//         }\r\n//         case ADD_TODOLIST: {\r\n//             return {\r\n//                 ...state,\r\n//                 [action.todolist.id]: []\r\n//             }\r\n//         }\r\n//         case REMOVE_TODOLIST: {\r\n//             const stateCopy = {...state};\r\n//             delete stateCopy[action.id];\r\n//             return stateCopy;\r\n//         }\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n// actions\r\n// export const removeTaskAC = (taskId: string, todolistId: string) =>\r\n//     ({type: REMOVE_TASK, taskId: taskId, todolistId: todolistId} as const);\r\n//\r\n// export const addTaskAC = (task: TaskType) => ({type: ADD_TASK, task} as const);\r\n//\r\n// export const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) =>\r\n//     ({type: CHANGE_TASK_STATUS, status, todolistId, taskId} as const);\r\n//\r\n// export const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) =>\r\n//     ({type: CHANGE_TASK_TITLE, title, todolistId, taskId} as const);\r\n//\r\n// export const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n//     ({type: SET_TASKS, tasks, todolistId} as const);\r\n\r\n// {\r\n//     [addTodolistAC.type]: (state, action: PayloadAction<{ }>) => {},\r\n//     [removeTodolistAC.type]: (state, action: PayloadAction<{ }>) => {},\r\n//     [setTodolistsAC.type]: (state, action: PayloadAction<{ }>) => {}\r\n// }\r\n\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        const itemTitle = title.trim();\r\n        if (itemTitle) {\r\n            addItem(title);\r\n        } else {\r\n            setError(\"Title is required!\");\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(null);\r\n        if (e.key === \"Enter\") addItemHandler();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n                label={\"New Title\"}\r\n                disabled={disabled}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addItemHandler} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => setEditMode(true);\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                value={title}\r\n                onChange={changeTitle}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n});\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                onChange={onChangeHandler}\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n            />\r\n            <EditableSpan title={props.task.title} changeTitle={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Task;","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport Task from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../../../state/todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../../../state/tasks-reducer\";\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (todolistId: string, taskTitle: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: TodolistPropsType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id));\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(props.todolist.id, title)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n    const removeTodolist = useCallback(() =>\r\n        props.removeTodolist(props.todolist.id), [props.removeTodolist, props.todolist.id]);\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 style={{textAlign: \"center\"}}>\r\n                <EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <div style={{marginTop: \"20px\"}}>\r\n                <Button\r\n                    variant={props.todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    size={\"small\"}\r\n                    style={{marginRight: \"3px\"}}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    variant={props.todolist.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    size={\"small\"}\r\n                    style={{marginRight: \"3px\"}}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={props.todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                    color={\"primary\"}\r\n                    size={\"small\"}\r\n                    style={{marginRight: \"3px\"}}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n            <ul style={{listStyle: \"none\", padding: \"0px\"}}>\r\n                {\r\n                    tasksForTodolist.map(t => <Task\r\n                            key={t.id}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                            task={t}\r\n                            todolistId={props.todolist.id}\r\n                            removeTask={props.removeTask}\r\n                        />\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"../../state/todolists-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {addTaskTC, removeTaskTC, updateTaskStatusTC, updateTaskTitleTC} from \"../../state/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {FilterValuesType, TasksStateType} from \"../../app/AppWithRedux\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n    const dispatch = useDispatch();\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsTC)\r\n    }, []);\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(todolistId, id);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (todolistId: string, taskTitle: string) {\r\n        dispatch(addTaskTC(todolistId, taskTitle));\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskStatusTC(id, status, todolistId));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTitleTC(id, newTitle, todolistId));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value});\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((todolistTitle: string) => {\r\n        dispatch(addTodolistTC(todolistTitle));\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"10px\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n\r\n                        let tasksForTodoList = tasks[tl.id];\r\n\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper elevation={10} style={{padding: \"20px\"}}>\r\n                                    <Todolist\r\n                                        todolist={tl}\r\n                                        tasks={tasksForTodoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        demo={demo}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch();\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {loginTC} from \"../../state/auth-reducer\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../state/store\";\nimport {TaskType} from \"../api/todolists-api\";\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport {initializeAppTC, RequestStatusType} from \"../state/app-reducer\";\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {Login} from \"../features/Login/Login\";\nimport {logoutTC} from \"../state/auth-reducer\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype AppPropsType = {\n    demo?: boolean\n}\n\nfunction AppWithRedux({demo = false}: AppPropsType) {\n\n    const dispatch = useDispatch();\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [])\n\n    if (!isInitialized) {\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    const logoutHandler = () => {\n        dispatch(logoutTC());\n    }\n\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\n                </Toolbar>\n                {status === 'loading' && <LinearProgress/>}\n            </AppBar>\n            <Container fixed>\n                <Switch>\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\n                    <Route path={'/login'} render={() => <Login/>}/>\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\n                    <Redirect from={'*'} to={'/404'}/>\n                </Switch>\n            </Container>\n        </div>\n    )\n}\n\nexport default AppWithRedux;\n\n","import {combineReducers} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./app/AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <AppWithRedux/>\r\n        </HashRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}